# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module PlexRubySDK
  module Models
    module Operations
    

      class GetLibraryItemsRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # The unique key of the Plex library. 
        # Note: This is unique in the context of the Plex server.
        # 
        field :section_key, ::Integer, { 'path_param': { 'field_name': 'sectionKey', 'style': 'simple', 'explode': false } }
        # A key representing a specific tag within the section.
        field :tag, Models::Operations::Tag, { 'path_param': { 'field_name': 'tag', 'style': 'simple', 'explode': false } }
        # The type of media to retrieve or filter by.
        # 1 = movie
        # 2 = show
        # 3 = season
        # 4 = episode
        # E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries
        # 
        field :type, Models::Operations::GetLibraryItemsQueryParamType, { 'query_param': { 'field_name': 'type', 'style': 'form', 'explode': true } }
        # Adds the Guids object to the response
        # 
        field :include_guids, T.nilable(Models::Operations::IncludeGuids), { 'query_param': { 'field_name': 'includeGuids', 'style': 'form', 'explode': true } }
        # Adds the Meta object to the response
        # 
        field :include_meta, T.nilable(Models::Operations::GetLibraryItemsQueryParamIncludeMeta), { 'query_param': { 'field_name': 'includeMeta', 'style': 'form', 'explode': true } }
        # The number of items to return. If not specified, all items will be returned.
        # If the number of items exceeds the limit, the response will be paginated.
        # By default this is 50
        # 
        field :x_plex_container_size, T.nilable(::Integer), { 'query_param': { 'field_name': 'X-Plex-Container-Size', 'style': 'form', 'explode': true } }
        # The index of the first item to return. If not specified, the first item will be returned.
        # If the number of items exceeds the limit, the response will be paginated.
        # By default this is 0
        # 
        field :x_plex_container_start, T.nilable(::Integer), { 'query_param': { 'field_name': 'X-Plex-Container-Start', 'style': 'form', 'explode': true } }


        sig { params(section_key: ::Integer, tag: Models::Operations::Tag, type: Models::Operations::GetLibraryItemsQueryParamType, include_guids: T.nilable(Models::Operations::IncludeGuids), include_meta: T.nilable(Models::Operations::GetLibraryItemsQueryParamIncludeMeta), x_plex_container_size: T.nilable(::Integer), x_plex_container_start: T.nilable(::Integer)).void }
        def initialize(section_key: nil, tag: nil, type: nil, include_guids: nil, include_meta: nil, x_plex_container_size: nil, x_plex_container_start: nil)
          @section_key = section_key
          @tag = tag
          @type = type
          @include_guids = include_guids
          @include_meta = include_meta
          @x_plex_container_size = x_plex_container_size
          @x_plex_container_start = x_plex_container_start
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @section_key == other.section_key
          return false unless @tag == other.tag
          return false unless @type == other.type
          return false unless @include_guids == other.include_guids
          return false unless @include_meta == other.include_meta
          return false unless @x_plex_container_size == other.x_plex_container_size
          return false unless @x_plex_container_start == other.x_plex_container_start
          true
        end
      end
    end
  end
end
