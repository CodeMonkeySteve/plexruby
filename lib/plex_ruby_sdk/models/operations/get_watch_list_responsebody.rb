# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module PlexRubySDK
  module Operations
    GET_WATCH_LIST_RESPONSE_BODY_SERVERS = [
      'https://metadata.provider.plex.tv'
    ].freeze
  
    # Watchlist Data
    class GetWatchListResponseBody < ::Crystalline::FieldAugmented
      extend T::Sig


      field :identifier, T.nilable(::String), { 'format_json': { 'letter_case': ::PlexRubySDK::Utils.field_name('identifier') } }

      field :library_section_id, T.nilable(::String), { 'format_json': { 'letter_case': ::PlexRubySDK::Utils.field_name('librarySectionID') } }

      field :library_section_title, T.nilable(::String), { 'format_json': { 'letter_case': ::PlexRubySDK::Utils.field_name('librarySectionTitle') } }

      field :metadata, T.nilable(T::Array[::PlexRubySDK::Operations::Metadata]), { 'format_json': { 'letter_case': ::PlexRubySDK::Utils.field_name('Metadata') } }

      field :offset, T.nilable(::Integer), { 'format_json': { 'letter_case': ::PlexRubySDK::Utils.field_name('offset') } }

      field :size, T.nilable(::Integer), { 'format_json': { 'letter_case': ::PlexRubySDK::Utils.field_name('size') } }

      field :total_size, T.nilable(::Integer), { 'format_json': { 'letter_case': ::PlexRubySDK::Utils.field_name('totalSize') } }


      sig { params(identifier: T.nilable(::String), library_section_id: T.nilable(::String), library_section_title: T.nilable(::String), metadata: T.nilable(T::Array[::PlexRubySDK::Operations::Metadata]), offset: T.nilable(::Integer), size: T.nilable(::Integer), total_size: T.nilable(::Integer)).void }
      def initialize(identifier: nil, library_section_id: nil, library_section_title: nil, metadata: nil, offset: nil, size: nil, total_size: nil)
        @identifier = identifier
        @library_section_id = library_section_id
        @library_section_title = library_section_title
        @metadata = metadata
        @offset = offset
        @size = size
        @total_size = total_size
      end
    end
  end
end
